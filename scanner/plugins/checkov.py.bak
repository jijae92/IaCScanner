"""Checkov integration."""
from __future__ import annotations

import json
import logging
from pathlib import Path
from typing import List

from ..schemas.finding import Finding, FindingLocation
from ..severity import Severity
from ..utils.shell import ShellCommandError, run_command


class CheckovScanner:
    """Run Checkov and translate output into Finding objects."""

    def scan(self, *, target_dir: Path, dry_run: bool = False) -> List[Finding]:
        if dry_run:
            logging.debug("Checkov dry-run mode enabled; returning synthetic finding.")
            return [
                Finding(
                    tool_id="checkov",
                    rule_id="CKV_AWS_20",
                    severity=Severity.HIGH,
                    message="Example Checkov finding (dry-run).",
                    location=FindingLocation(file_path=str(target_dir / "main.tf"), line=5),
                    fingerprint="checkov:CKV_AWS_20:main.tf:5",
                )
            ]
        try:
            completed = run_command([
                "checkov",
                "-d",
                str(target_dir),
                "-o",
                "json",
            ])
        except ShellCommandError as exc:
            logging.error("Checkov execution failed: %s", exc)
            return []
        try:
            parsed = json.loads(completed.stdout)
        except json.JSONDecodeError as exc:
            logging.error("Unable to parse Checkov output: %s", exc)
            return []
        return self._convert(parsed)

    def _convert(self, payload: dict) -> List[Finding]:
        findings: List[Finding] = []
        results = payload.get("results", {})
        for check in results.get("failed_checks", []):
            file_path = str(check.get("file_path", "unknown"))
            line_range = check.get("file_line_range", [None, None])
            fingerprint = f"{check.get('check_id', 'unknown')}:{file_path}:{line_range[0] or 0}"
            finding = Finding(
                tool_id="checkov",
                rule_id=str(check.get("check_id", "unknown")),
                severity=Severity.from_string(str(check.get("severity", "LOW"))),
                message=str(check.get("check_name", "Checkov finding")),
                location=FindingLocation(file_path=file_path, line=line_range[0]),
                resource=str(check.get("resource", "")) or None,
                fingerprint=fingerprint,
                extra={"guideline": check.get("guideline")},
            )
            findings.append(finding)
        return findings


__all__ = ["CheckovScanner"]
